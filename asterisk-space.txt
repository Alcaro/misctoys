There are many ways to vary your C/C++/etc coding standards. Tab width, space after if,
underscores/CamelCase, etc.

Most of the possibilities are either always resolved the same way (whether to indent), or I don't
really care (tab vs space, space after if, etc; I have my preferences, of course, but I'll adapt to
whatever the project does). It's somewhat silly that there's no universally agreed-upon standard,
but that's what happens when opinions come into the game.

But there is one I care more about; not enough to whine about, but I have to consciously think of
it, rather than instantly inferring it from the surrounding code.

Where the asterisk goes on pointer variable declarations.

int *foo;
int* bar;
int * baz;
int*quux;

I never see the fourth one outside IOCCC and 'echo foo bar | gcc', which don't need coding
standards; the third is also rare (though I personally use it sometimes). But the first two are
roughly equally common.

At a first glance, the language leads you towards the first one: int foo[10]; int *bar = foo; -
they're both attached to the name, not the base type. char* foo, bar; is most likely a bug;
char *foo, bar; is far more likely correct. int *foo = &bar; *foo = 4; - there's some pretty nice
symmetry here.

But I believe that is a mistake. The variable is not named *foo, it's named foo. The type is int*,
not int. int foo[10] should've been int[10] foo.

Why? Because most of the time, you don't want the asterisk. Array? You probably want operator[]
instead. strlen? Passing variables takes no asterisk. Pointer to a struct? That's usually
operator->. void pointer? Needs a cast; either inline (the variable certainly isn't named
*(int *)foo), or as another variable (which doesn't necessarily want unary operator* either). Unary
operator* does appear sometimes, but it's too rare to dictate the coding style elsewhere.

And then there's a whole other can of worms in C++, where templates force you to put everything on
the left side (unique_ptr<int> foo acts mostly like int *foo, but the former is certainly not named
*foo), and references too prefer to be on the left (given int &foo, &foo is not an int).

The variable is named foo. It is of type int*. Anything else is hiding information from yourself.

I believe the C language is like this for historical reasons; when C was invented, every byte was
expensive, and int foo,*bar,**baz; was a significant saving over int foo; int* bar; int** baz;.
Optimizations were expensive too, and compilers didn't do them; manual optimization with pointer
math yielded better results than array indexing. These days, those justifications no longer apply.


If you believe I'm missing some important detail, corrections and harassment welcome at GitHub
issues or floating@muncher.se.
