There are many ways to vary your C/C++/etc coding standards. Tab width, space after if,
underscores/CamelCase, etc.

Most of the possibilities are either always resolved the same way (whether to indent), or I don't
really care (what the tab width is).

But there is one I care more about; not enough to whine about, but I have to consciously think of
it, rather than instantly inferring it from the surrounding code.

Where the asterisk goes on pointer variable declarations.

int *foo;
int* bar;
int * baz;
int*quux;

I have never seen the fourth one outside IOCCC and 'echo foo bar | gcc', which don't need coding
standards; the third is also rare (I use it for arrays, bar for non-arrays). But the first two are
roughly equally common.

At a first glance, the language leads you towards the first one: int foo[10]; int *bar = foo; -
they're both attached to the name, not the base type. char* foo, bar; is most likely a bug;
char *foo, bar; is far more likely correct. int *foo = &bar; *foo = 4; - there's some pretty nice
symmetry here.

But I believe that is a mistake. The variable is named foo, not *foo; the type is int*, not int.

Encoding type information in the start of a variable isn't unusual; Fortran uses 'int' for anything
starting with IJKLMN, while any other prefix is 'float'. Systems Hungarian Notation is similar.
(Apps Hungarian embeds more than the actual type and is thus irrelevant. Google them if you want to
know more.)

And people rebelled, for good reasons. The compiler (and, these days, your IDE) already knows the
types and will point out if you make a mistake. (Unless you assign the integer 0 to a pointer, but
that's another issue.) Enforced naming conventions are only a few extra keystrokes and another thing
to keep in mind.

And even if you do prefix your pointers with an asterisk, you run into all those situations where
the asterisk suddenly shouldn't be there. Passing a pointer to a function? No asterisk. Pointer
points to a struct? There's a reason operator-> exists. Or if it's an array, better treat it like an
array and use operator[]; pointer math is easy to get wrong.

I believe the only situations where unary operator* is relevant are pointer math (often discouraged)
and out parameters (too rare to direct your coding style).

And then there's a whole other can of worms in C++, where the templates force you to put everything
on the left side. Pointers usually (but not always) follow suit.

The variable is named bar. It is of type int*. Anything else is hiding information from yourself.


I'll be glad to hear from anyone who disagrees, via GitHub issue or email to
<printf("%s@muncher%cse", "floating", 0x2E);>; I believe others' opinions are not wrong, even if
different. I often can't see how you reached that conclusion, but I believe there is a logical path
to that end, and I want to know more about how others think. (Or if this managed to change your
opinion, that's also welcome!)
